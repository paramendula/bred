Path
    id+
ImportPath
    Path
    Path::*
    Path::{
        ImportPath+,
    }
Type
    Path & GenericDecl?
GenericDecl
    Type+
Argument
    id & Type
StructMember
    id & Type
EnumMember
    id & Literal
ProcBlock
    AST+
SwitchMember
    Literal & AST+



Import
    import ImportPath;
Alias
    alias id = Type;
Variable
    [var|let|const] id: Type = ExprAST;
Structure
    struct id<GenericDecl> {
        StructMember+
    }
Enum
    enum id {
        EnumMember+
    }
Block
    StatAST+;
Module
    mod id Block
Procedure
    [extern] proc id<GenericDecl> -> ProcBlock



Infix
    ExprAST id ExprAST

Prefix
    id ExprAST

ProcCall
    id(ExprAST*,)

IfClause
    if(ExprAST)
        ExprAST | ProcBlock

WhileLoop
    while(ExprAST)
        ExprAST | ProcBlock

ForLoop
    for(ExprAST; ExprAST; ExprAST)
        ExprAST | ProcBlock

SwitchClause
    switch(ExprAST) {
        SwitchMember+
    }
ExprBlock
    ExprAST | StatExprAST

